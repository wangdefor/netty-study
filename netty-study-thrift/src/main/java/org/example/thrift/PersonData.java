/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.example.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-05-28")
public class PersonData implements org.apache.thrift.TBase<PersonData, PersonData._Fields>, java.io.Serializable, Cloneable, Comparable<PersonData> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PersonData");
    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final _Fields optionals[] = {_Fields.NUM1, _Fields.COMMENT};

    static {
        schemes.put(StandardScheme.class, new PersonDataStandardSchemeFactory());
        schemes.put(TupleScheme.class, new PersonDataTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
        tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PersonData.class, metaDataMap);
    }

    public int num1; // optional
    public String comment; // optional
    private byte __isset_bitfield = 0;

    public PersonData() {
        this.num1 = 0;

    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PersonData(PersonData other) {
        __isset_bitfield = other.__isset_bitfield;
        this.num1 = other.num1;
        if (other.isSetComment()) {
            this.comment = other.comment;
        }
    }

    public PersonData deepCopy() {
        return new PersonData(this);
    }

    @Override
    public void clear() {
        this.num1 = 0;

        this.comment = null;
    }

    public int getNum1() {
        return this.num1;
    }

    public PersonData setNum1(int num1) {
        this.num1 = num1;
        setNum1IsSet(true);
        return this;
    }

    public void unsetNum1() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
        return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public String getComment() {
        return this.comment;
    }

    public PersonData setComment(String comment) {
        this.comment = comment;
        return this;
    }

    public void unsetComment() {
        this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
        return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
        if (!value) {
            this.comment = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case NUM1:
                if (value == null) {
                    unsetNum1();
                } else {
                    setNum1((Integer) value);
                }
                break;

            case COMMENT:
                if (value == null) {
                    unsetComment();
                } else {
                    setComment((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case NUM1:
                return getNum1();

            case COMMENT:
                return getComment();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case NUM1:
                return isSetNum1();
            case COMMENT:
                return isSetComment();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PersonData)
            return this.equals((PersonData) that);
        return false;
    }

    public boolean equals(PersonData that) {
        if (that == null)
            return false;

        boolean this_present_num1 = true && this.isSetNum1();
        boolean that_present_num1 = true && that.isSetNum1();
        if (this_present_num1 || that_present_num1) {
            if (!(this_present_num1 && that_present_num1))
                return false;
            if (this.num1 != that.num1)
                return false;
        }

        boolean this_present_comment = true && this.isSetComment();
        boolean that_present_comment = true && that.isSetComment();
        if (this_present_comment || that_present_comment) {
            if (!(this_present_comment && that_present_comment))
                return false;
            if (!this.comment.equals(that.comment))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_num1 = true && (isSetNum1());
        list.add(present_num1);
        if (present_num1)
            list.add(num1);

        boolean present_comment = true && (isSetComment());
        list.add(present_comment);
        if (present_comment)
            list.add(comment);

        return list.hashCode();
    }

    @Override
    public int compareTo(PersonData other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNum1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetComment()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PersonData(");
        boolean first = true;

        if (isSetNum1()) {
            sb.append("num1:");
            sb.append(this.num1);
            first = false;
        }
        if (isSetComment()) {
            if (!first) sb.append(", ");
            sb.append("comment:");
            if (this.comment == null) {
                sb.append("null");
            } else {
                sb.append(this.comment);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NUM1((short) 1, "num1"),
        COMMENT((short) 2, "comment");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // NUM1
                    return NUM1;
                case 2: // COMMENT
                    return COMMENT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class PersonDataStandardSchemeFactory implements SchemeFactory {
        public PersonDataStandardScheme getScheme() {
            return new PersonDataStandardScheme();
        }
    }

    private static class PersonDataStandardScheme extends StandardScheme<PersonData> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PersonData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // NUM1
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num1 = iprot.readI32();
                            struct.setNum1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // COMMENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.comment = iprot.readString();
                            struct.setCommentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PersonData struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetNum1()) {
                oprot.writeFieldBegin(NUM1_FIELD_DESC);
                oprot.writeI32(struct.num1);
                oprot.writeFieldEnd();
            }
            if (struct.comment != null) {
                if (struct.isSetComment()) {
                    oprot.writeFieldBegin(COMMENT_FIELD_DESC);
                    oprot.writeString(struct.comment);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PersonDataTupleSchemeFactory implements SchemeFactory {
        public PersonDataTupleScheme getScheme() {
            return new PersonDataTupleScheme();
        }
    }

    private static class PersonDataTupleScheme extends TupleScheme<PersonData> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PersonData struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetNum1()) {
                optionals.set(0);
            }
            if (struct.isSetComment()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetNum1()) {
                oprot.writeI32(struct.num1);
            }
            if (struct.isSetComment()) {
                oprot.writeString(struct.comment);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PersonData struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
            }
            if (incoming.get(1)) {
                struct.comment = iprot.readString();
                struct.setCommentIsSet(true);
            }
        }
    }

}

